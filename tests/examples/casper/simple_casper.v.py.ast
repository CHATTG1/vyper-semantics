%pgm(,
  %svdecl(validators, %mapT(%num, %structT(%annvar(addr, %address) %annvar(deposit, %unitT(%decimal, %udiv(%wei, %m), false)) %annvar(end_dynasty, %num) %annvar(start_dynasty, %num) %annvar(withdrawal_addr, %address))), %public)
  %svdecl(nextValidatorIndex, %num, %public)
  %svdecl(validator_indexes, %mapT(%address, %num), %public)
  %svdecl(dynasty, %num, %public)
  %svdecl(next_dynasty_wei_delta, %unitT(%decimal, %udiv(%wei, %m), false), %public)
  %svdecl(second_next_dynasty_wei_delta, %unitT(%decimal, %udiv(%wei, %m), false), %public)
  %svdecl(total_curdyn_deposits, %unitT(%decimal, %udiv(%wei, %m), false), %private)
  %svdecl(total_prevdyn_deposits, %unitT(%decimal, %udiv(%wei, %m), false), %private)
  %svdecl(dynasty_start_epoch, %mapT(%num, %num), %public)
  %svdecl(dynasty_in_epoch, %mapT(%num, %num), %public)
  %svdecl(votes, %mapT(%num, %structT(%annvar(cur_dyn_votes, %mapT(%num, %unitT(%decimal, %udiv(%wei, %m), false))) %annvar(is_finalized, %bool) %annvar(is_justified, %bool) %annvar(prev_dyn_votes, %mapT(%num, %unitT(%decimal, %udiv(%wei, %m), false))) %annvar(vote_bitmap, %mapT(%bytes32, %mapT(%num, %num256))))), %public)
  %svdecl(main_hash_justified, %bool, %public)
  %svdecl(deposit_scale_factor, %mapT(%num, %unitT(%decimal, %m, false)), %public)
  %svdecl(last_nonvoter_rescale, %decimal, %public)
  %svdecl(last_voter_rescale, %decimal, %public)
  %svdecl(epoch_length, %num, %public)
  %svdecl(withdrawal_delay, %num, %public)
  %svdecl(current_epoch, %num, %public)
  %svdecl(last_finalized_epoch, %num, %public)
  %svdecl(last_justified_epoch, %num, %public)
  %svdecl(expected_source_epoch, %num, %public)
  %svdecl(owner, %address, %private)
  %svdecl(total_destroyed, %wei_value, %private)
  %svdecl(sighasher, %address, %private)
  %svdecl(purity_checker, %address, %private)
  %svdecl(reward_factor, %decimal, %public)
  %svdecl(base_interest_factor, %decimal, %public)
  %svdecl(base_penalty_factor, %decimal, %public)
  %svdecl(vote_log_topic, %bytes32, %private),
  %fdecl(%@public, __init__, %param(_epoch_length, %num) %param(_withdrawal_delay, %num) %param(_owner, %address) %param(_sighasher, %address) %param(_purity_checker, %address) %param(_base_interest_factor, %decimal) %param(_base_penalty_factor, %decimal), %void,
    %assign(%svar(epoch_length), %var(_epoch_length))
    %assign(%svar(withdrawal_delay), %var(_withdrawal_delay))
    %assign(%svar(nextValidatorIndex), 1)
    %assign(%svar(owner), %var(_owner))
    %assign(%subscript(%svar(deposit_scale_factor), 0), %fixed10(10000000000, 1))
    %assign(%svar(dynasty), 0)
    %assign(%svar(current_epoch), %binop(/, %block.number, %svar(epoch_length)))
    %assign(%svar(sighasher), %var(_sighasher))
    %assign(%svar(purity_checker), %var(_purity_checker))
    %assign(%svar(total_curdyn_deposits), 0)
    %assign(%svar(total_prevdyn_deposits), 0)
    %assign(%svar(base_interest_factor), %var(_base_interest_factor))
    %assign(%svar(base_penalty_factor), %var(_base_penalty_factor))
    %assign(%svar(vote_log_topic), %sha3("vote()"))),
  %fdecl(%@public %@constant, get_main_hash_voted_frac, , %decimal,
    %return(%min(%binop(/, %subscript(%attribute(%subscript(%svar(votes), %svar(current_epoch)), cur_dyn_votes), %svar(expected_source_epoch)), %svar(total_curdyn_deposits)), %binop(/, %subscript(%attribute(%subscript(%svar(votes), %svar(current_epoch)), prev_dyn_votes), %svar(expected_source_epoch)), %svar(total_prevdyn_deposits)))))
  %fdecl(%@public %@constant, get_deposit_size, %param(validator_index, %num), %unitT(%num, %wei, false),
    %return(%floor(%binop(*, %attribute(%subscript(%svar(validators), %var(validator_index)), deposit), %subscript(%svar(deposit_scale_factor), %svar(current_epoch))))))
  %fdecl(%@public %@constant, get_total_curdyn_deposits, , %wei_value,
    %return(%floor(%binop(*, %svar(total_curdyn_deposits), %subscript(%svar(deposit_scale_factor), %svar(current_epoch))))))
  %fdecl(%@public %@constant, get_total_prevdyn_deposits, , %wei_value,
    %return(%floor(%binop(*, %svar(total_prevdyn_deposits), %subscript(%svar(deposit_scale_factor), %svar(current_epoch))))))
  %fdecl(%@public %@constant, get_recommended_source_epoch, , %num,
    %return(%svar(expected_source_epoch)))
  %fdecl(%@public %@constant, get_recommended_target_hash, , %bytes32,
    %return(%blockhash(%binop(-, %binop(*, %svar(current_epoch), %svar(epoch_length)), 1))))
  %fdecl(%@public, initialize_epoch, %param(epoch, %num), %void,
    %assign(%var(computed_current_epoch), %binop(/, %block.number, %svar(epoch_length)))
    %assert(%boolop(%and, %compareop(%le, %var(epoch), %var(computed_current_epoch)), %compareop(%eq, %var(epoch), %binop(+, %svar(current_epoch), 1))))
    %assign(%svar(current_epoch), %var(epoch))
    %assign(%var(deposit_exists), %boolop(%and, %compareop(%gt, %svar(total_curdyn_deposits), 0), %compareop(%gt, %svar(total_prevdyn_deposits), 0)))
    %assign(%var(ether_deposited_as_number), %binop(+, %floor(%binop(/, %binop(*, %max(%svar(total_prevdyn_deposits), %svar(total_curdyn_deposits)), %subscript(%svar(deposit_scale_factor), %binop(-, %var(epoch), 1))), %as_wei_value(1, ether))), 1))
    %assign(%var(sqrt), %binop(/, %var(ether_deposited_as_number), %fixed10(2, 1)))
    %forrange(i, 20,
      %assign(%var(sqrt), %binop(/, %binop(+, %var(sqrt), %binop(/, %var(ether_deposited_as_number), %var(sqrt))), 2)))
    %assign(%var(d), %binop(-, %var(epoch), %svar(last_finalized_epoch)))
    %assign(%var(collective_virtue_reward), %fixed10(0, 1))
    %if(%boolop(%and, %var(deposit_exists), %compareop(%le, %var(d), 2)),
      %assign(%var(cur_vote_frac), %binop(/, %subscript(%attribute(%subscript(%svar(votes), %binop(-, %var(epoch), 1)), cur_dyn_votes), %svar(expected_source_epoch)), %svar(total_curdyn_deposits)))
      %assign(%var(prev_vote_frac), %binop(/, %subscript(%attribute(%subscript(%svar(votes), %binop(-, %var(epoch), 1)), prev_dyn_votes), %svar(expected_source_epoch)), %svar(total_prevdyn_deposits)))
      %assign(%var(vote_frac), %min(%var(cur_vote_frac), %var(prev_vote_frac)))
      %assign(%var(collective_virtue_reward), %binop(/, %binop(*, %var(vote_frac), %svar(reward_factor)), 2)))
    %if(%unaryop(%not, %var(deposit_exists)),
      %assign(%svar(main_hash_justified), true)
      %assign(%attribute(%subscript(%svar(votes), %binop(-, %var(epoch), 1)), is_justified), true)
      %assign(%attribute(%subscript(%svar(votes), %binop(-, %var(epoch), 1)), is_finalized), true)
      %assign(%svar(last_justified_epoch), %binop(-, %var(epoch), 1))
      %assign(%svar(last_finalized_epoch), %binop(-, %var(epoch), 1)))
    %assign(%svar(last_nonvoter_rescale), %binop(-, %binop(+, 1, %var(collective_virtue_reward)), %svar(reward_factor)))
    %assign(%svar(last_voter_rescale), %binop(*, %svar(last_nonvoter_rescale), %binop(+, 1, %svar(reward_factor))))
    %assign(%subscript(%svar(deposit_scale_factor), %var(epoch)), %binop(*, %subscript(%svar(deposit_scale_factor), %binop(-, %var(epoch), 1)), %svar(last_nonvoter_rescale)))
    %if(%var(deposit_exists),
      %assign(%var(base_interest_rate), %binop(/, %svar(base_interest_factor), %var(sqrt)))
      %assign(%svar(reward_factor), %binop(+, %var(base_interest_rate), %binop(*, %svar(base_penalty_factor), %var(d))))
      %assert(%compareop(%gt, %svar(reward_factor), 0)),
      %assign(%svar(reward_factor), 0))
    %if(%attribute(%subscript(%svar(votes), %binop(-, %var(epoch), 2)), is_finalized),
      %augassign(+=, %svar(dynasty), 1)
      %assign(%svar(total_prevdyn_deposits), %svar(total_curdyn_deposits))
      %augassign(+=, %svar(total_curdyn_deposits), %svar(next_dynasty_wei_delta))
      %assign(%svar(next_dynasty_wei_delta), %svar(second_next_dynasty_wei_delta))
      %assign(%svar(second_next_dynasty_wei_delta), 0)
      %assign(%subscript(%svar(dynasty_start_epoch), %svar(dynasty)), %var(epoch)))
    %assign(%subscript(%svar(dynasty_in_epoch), %var(epoch)), %svar(dynasty))
    %if(%svar(main_hash_justified),
      %assign(%svar(expected_source_epoch), %binop(-, %var(epoch), 1)))
    %assign(%svar(main_hash_justified), false))
  %fdecl(%@public %@payable, deposit, %param(validation_addr, %address) %param(withdrawal_addr, %address), %void,
    %assert(%compareop(%eq, %svar(current_epoch), %binop(/, %block.number, %svar(epoch_length))))
    %assert(%compareop(%ne, %extract32(%raw_call(%svar(purity_checker), %concat("¡>«", %as_bytes32(%var(validation_addr))), %kwarg(gas, 500000), %kwarg(outsize, 32)), 0), %as_bytes32(0)))
    %assert(%unaryop(%not, %subscript(%svar(validator_indexes), %var(withdrawal_addr))))
    %assign(%subscript(%svar(validators), %svar(nextValidatorIndex)), %struct(%item(deposit, %binop(/, %msg.value, %subscript(%svar(deposit_scale_factor), %svar(current_epoch)))) %item(start_dynasty, %binop(+, %svar(dynasty), 2)) %item(end_dynasty, 1000000000000000000000000000000) %item(addr, %var(validation_addr)) %item(withdrawal_addr, %var(withdrawal_addr))))
    %assign(%subscript(%svar(validator_indexes), %var(withdrawal_addr)), %svar(nextValidatorIndex))
    %augassign(+=, %svar(nextValidatorIndex), 1)
    %augassign(+=, %svar(second_next_dynasty_wei_delta), %binop(/, %msg.value, %subscript(%svar(deposit_scale_factor), %svar(current_epoch)))))
  %fdecl(%@public, logout, %param(logout_msg, %bytesT(1024)), %void,
    %assert(%compareop(%eq, %svar(current_epoch), %binop(/, %block.number, %svar(epoch_length))))
    %assign(%var(sighash), %extract32(%raw_call(%svar(sighasher), %var(logout_msg), %kwarg(gas, 200000), %kwarg(outsize, 32)), 0))
    %assign(%var(values), %RLPList(%var(logout_msg), %list(%var(num) %var(num) %var(bytes))))
    %assign(%var(validator_index), %subscript(%var(values), 0))
    %assign(%var(epoch), %subscript(%var(values), 1))
    %assign(%var(sig), %subscript(%var(values), 2))
    %assert(%compareop(%eq, %svar(current_epoch), %var(epoch)))
    %assert(%compareop(%eq, %extract32(%raw_call(%attribute(%subscript(%svar(validators), %var(validator_index)), addr), %concat(%var(sighash), %var(sig)), %kwarg(gas, 500000), %kwarg(outsize, 32)), 0), %as_bytes32(1)))
    %assert(%compareop(%ge, %attribute(%subscript(%svar(validators), %var(validator_index)), end_dynasty), %binop(+, %svar(dynasty), 2)))
    %assign(%attribute(%subscript(%svar(validators), %var(validator_index)), end_dynasty), %binop(+, %svar(dynasty), 2))
    %augassign(-=, %svar(second_next_dynasty_wei_delta), %attribute(%subscript(%svar(validators), %var(validator_index)), deposit)))
  %fdecl(%@private, delete_validator, %param(validator_index, %num), %void,
    %if(%compareop(%gt, %attribute(%subscript(%svar(validators), %var(validator_index)), end_dynasty), %binop(+, %svar(dynasty), 2)),
      %augassign(-=, %svar(next_dynasty_wei_delta), %attribute(%subscript(%svar(validators), %var(validator_index)), deposit)))
    %assign(%subscript(%svar(validator_indexes), %attribute(%subscript(%svar(validators), %var(validator_index)), withdrawal_addr)), 0)
    %assign(%subscript(%svar(validators), %var(validator_index)), %struct(%item(deposit, 0) %item(start_dynasty, 0) %item(end_dynasty, 0) %item(addr, None) %item(withdrawal_addr, None))))
  %fdecl(%@public, withdraw, %param(validator_index, %num), %void,
    %assert(%compareop(%ge, %svar(dynasty), %binop(+, %attribute(%subscript(%svar(validators), %var(validator_index)), end_dynasty), 1)))
    %assign(%var(end_epoch), %subscript(%svar(dynasty_start_epoch), %binop(+, %attribute(%subscript(%svar(validators), %var(validator_index)), end_dynasty), 1)))
    %assert(%compareop(%ge, %svar(current_epoch), %binop(+, %var(end_epoch), %svar(withdrawal_delay))))
    %assign(%var(withdraw_amount), %floor(%binop(*, %attribute(%subscript(%svar(validators), %var(validator_index)), deposit), %subscript(%svar(deposit_scale_factor), %var(end_epoch)))))
    %send(%attribute(%subscript(%svar(validators), %var(validator_index)), withdrawal_addr), %var(withdraw_amount))
    %stmtexpr(%icall(delete_validator, %var(validator_index))))
  %fdecl(%@private, proc_reward, %param(validator_index, %num) %param(reward, %unitT(%num, %udiv(%wei, %m), false)), %void,
    %assign(%var(start_epoch), %subscript(%svar(dynasty_start_epoch), %attribute(%subscript(%svar(validators), %var(validator_index)), start_dynasty)))
    %augassign(+=, %attribute(%subscript(%svar(validators), %var(validator_index)), deposit), %var(reward))
    %assign(%var(start_dynasty), %attribute(%subscript(%svar(validators), %var(validator_index)), start_dynasty))
    %assign(%var(end_dynasty), %attribute(%subscript(%svar(validators), %var(validator_index)), end_dynasty))
    %assign(%var(current_dynasty), %svar(dynasty))
    %assign(%var(past_dynasty), %binop(-, %var(current_dynasty), 1))
    %if(%boolop(%and, %compareop(%le, %var(start_dynasty), %var(current_dynasty)), %compareop(%lt, %var(current_dynasty), %var(end_dynasty))),
      %augassign(+=, %svar(total_curdyn_deposits), %var(reward)))
    %if(%boolop(%and, %compareop(%le, %var(start_dynasty), %var(past_dynasty)), %compareop(%lt, %var(past_dynasty), %var(end_dynasty))),
      %augassign(+=, %svar(total_prevdyn_deposits), %var(reward)))
    %if(%compareop(%eq, %var(current_dynasty), %binop(-, %var(end_dynasty), 1)),
      %augassign(-=, %svar(next_dynasty_wei_delta), %var(reward)))
    %if(%compareop(%eq, %var(current_dynasty), %binop(-, %var(end_dynasty), 2)),
      %augassign(-=, %svar(second_next_dynasty_wei_delta), %var(reward)))
    %send(%block.coinbase, %floor(%binop(/, %binop(*, %var(reward), %subscript(%svar(deposit_scale_factor), %svar(current_epoch))), 8))))
  %fdecl(%@public, vote, %param(vote_msg, %bytesT(1024)), %void,
    %assign(%var(sighash), %extract32(%raw_call(%svar(sighasher), %var(vote_msg), %kwarg(gas, 200000), %kwarg(outsize, 32)), 0))
    %assign(%var(values), %RLPList(%var(vote_msg), %list(%var(num) %var(bytes32) %var(num) %var(num) %var(bytes))))
    %assign(%var(validator_index), %subscript(%var(values), 0))
    %assign(%var(target_hash), %subscript(%var(values), 1))
    %assign(%var(target_epoch), %subscript(%var(values), 2))
    %assign(%var(source_epoch), %subscript(%var(values), 3))
    %assign(%var(sig), %subscript(%var(values), 4))
    %assert(%compareop(%eq, %extract32(%raw_call(%attribute(%subscript(%svar(validators), %var(validator_index)), addr), %concat(%var(sighash), %var(sig)), %kwarg(gas, 500000), %kwarg(outsize, 32)), 0), %as_bytes32(1)))
    %assert(%unaryop(%not, %bitwise_and(%subscript(%subscript(%attribute(%subscript(%svar(votes), %var(target_epoch)), vote_bitmap), %var(target_hash)), %binop(/, %var(validator_index), 256)), %shift(%as_num256(1), %binop(%, %var(validator_index), 256)))))
    %assert(%compareop(%eq, %var(target_hash), %icall(get_recommended_target_hash, )))
    %assert(%attribute(%subscript(%svar(votes), %var(source_epoch)), is_justified))
    %assign(%var(start_dynasty), %attribute(%subscript(%svar(validators), %var(validator_index)), start_dynasty))
    %assign(%var(end_dynasty), %attribute(%subscript(%svar(validators), %var(validator_index)), end_dynasty))
    %assign(%var(current_dynasty), %subscript(%svar(dynasty_in_epoch), %var(target_epoch)))
    %assign(%var(past_dynasty), %binop(-, %var(current_dynasty), 1))
    %assign(%var(in_current_dynasty), %boolop(%and, %compareop(%le, %var(start_dynasty), %var(current_dynasty)), %compareop(%lt, %var(current_dynasty), %var(end_dynasty))))
    %assign(%var(in_prev_dynasty), %boolop(%and, %compareop(%le, %var(start_dynasty), %var(past_dynasty)), %compareop(%lt, %var(past_dynasty), %var(end_dynasty))))
    %assert(%boolop(%or, %var(in_current_dynasty), %var(in_prev_dynasty)))
    %assign(%subscript(%subscript(%attribute(%subscript(%svar(votes), %var(target_epoch)), vote_bitmap), %var(target_hash)), %binop(/, %var(validator_index), 256)), %bitwise_or(%subscript(%subscript(%attribute(%subscript(%svar(votes), %var(target_epoch)), vote_bitmap), %var(target_hash)), %binop(/, %var(validator_index), 256)), %shift(%as_num256(1), %binop(%, %var(validator_index), 256))))
    %assign(%var(current_dynasty_votes), %subscript(%attribute(%subscript(%svar(votes), %var(target_epoch)), cur_dyn_votes), %var(source_epoch)))
    %assign(%var(previous_dynasty_votes), %subscript(%attribute(%subscript(%svar(votes), %var(target_epoch)), prev_dyn_votes), %var(source_epoch)))
    %if(%var(in_current_dynasty),
      %augassign(+=, %var(current_dynasty_votes), %attribute(%subscript(%svar(validators), %var(validator_index)), deposit))
      %assign(%subscript(%attribute(%subscript(%svar(votes), %var(target_epoch)), cur_dyn_votes), %var(source_epoch)), %var(current_dynasty_votes)))
    %if(%var(in_prev_dynasty),
      %augassign(+=, %var(previous_dynasty_votes), %attribute(%subscript(%svar(validators), %var(validator_index)), deposit))
      %assign(%subscript(%attribute(%subscript(%svar(votes), %var(target_epoch)), prev_dyn_votes), %var(source_epoch)), %var(previous_dynasty_votes)))
    %if(%boolop(%and, %compareop(%eq, %svar(current_epoch), %var(target_epoch)), %compareop(%eq, %svar(expected_source_epoch), %var(source_epoch))),
      %assign(%var(reward), %floor(%binop(*, %attribute(%subscript(%svar(validators), %var(validator_index)), deposit), %svar(reward_factor))))
      %stmtexpr(%icall(proc_reward, %var(validator_index) %var(reward))))
    %if(%boolop(%and, %boolop(%and, %compareop(%ge, %var(current_dynasty_votes), %binop(/, %binop(*, %svar(total_curdyn_deposits), 2), 3)), %compareop(%ge, %var(previous_dynasty_votes), %binop(/, %binop(*, %svar(total_prevdyn_deposits), 2), 3))), %unaryop(%not, %attribute(%subscript(%svar(votes), %var(target_epoch)), is_justified))),
      %assign(%attribute(%subscript(%svar(votes), %var(target_epoch)), is_justified), true)
      %assign(%svar(last_justified_epoch), %var(target_epoch))
      %if(%compareop(%eq, %var(target_epoch), %svar(current_epoch)),
        %assign(%svar(main_hash_justified), true))
      %if(%compareop(%eq, %var(target_epoch), %binop(+, %var(source_epoch), 1)),
        %assign(%attribute(%subscript(%svar(votes), %var(source_epoch)), is_finalized), true)
        %assign(%svar(last_finalized_epoch), %var(source_epoch))))
    %stmtexpr(%raw_log(%list(%svar(vote_log_topic)), %var(vote_msg))))
  %fdecl(%@public, slash, %param(vote_msg_1, %bytesT(1024)) %param(vote_msg_2, %bytesT(1024)), %void,
    %assign(%var(sighash_1), %extract32(%raw_call(%svar(sighasher), %var(vote_msg_1), %kwarg(gas, 200000), %kwarg(outsize, 32)), 0))
    %assign(%var(values), %RLPList(%var(vote_msg_1), %list(%var(num) %var(bytes32) %var(num) %var(num) %var(bytes))))
    %assign(%var(validator_index_1), %subscript(%var(values), 0))
    %assign(%var(target_epoch_1), %subscript(%var(values), 2))
    %assign(%var(source_epoch_1), %subscript(%var(values), 3))
    %assign(%var(sig_1), %subscript(%var(values), 4))
    %assert(%compareop(%eq, %extract32(%raw_call(%attribute(%subscript(%svar(validators), %var(validator_index_1)), addr), %concat(%var(sighash_1), %var(sig_1)), %kwarg(gas, 500000), %kwarg(outsize, 32)), 0), %as_bytes32(1)))
    %assign(%var(sighash_2), %extract32(%raw_call(%svar(sighasher), %var(vote_msg_2), %kwarg(gas, 200000), %kwarg(outsize, 32)), 0))
    %assign(%var(values), %RLPList(%var(vote_msg_2), %list(%var(num) %var(bytes32) %var(num) %var(num) %var(bytes))))
    %assign(%var(validator_index_2), %subscript(%var(values), 0))
    %assign(%var(target_epoch_2), %subscript(%var(values), 2))
    %assign(%var(source_epoch_2), %subscript(%var(values), 3))
    %assign(%var(sig_2), %subscript(%var(values), 4))
    %assert(%compareop(%eq, %extract32(%raw_call(%attribute(%subscript(%svar(validators), %var(validator_index_2)), addr), %concat(%var(sighash_2), %var(sig_2)), %kwarg(gas, 500000), %kwarg(outsize, 32)), 0), %as_bytes32(1)))
    %assert(%compareop(%eq, %var(validator_index_1), %var(validator_index_2)))
    %assert(%compareop(%ne, %var(sighash_1), %var(sighash_2)))
    %assign(%var(slashing_condition_detected), false)
    %if(%compareop(%eq, %var(target_epoch_1), %var(target_epoch_2)),
      %assign(%var(slashing_condition_detected), true),
      %if(%boolop(%or, %boolop(%and, %compareop(%gt, %var(target_epoch_1), %var(target_epoch_2)), %compareop(%lt, %var(source_epoch_1), %var(source_epoch_2))), %boolop(%and, %compareop(%gt, %var(target_epoch_2), %var(target_epoch_1)), %compareop(%lt, %var(source_epoch_2), %var(source_epoch_1)))),
        %assign(%var(slashing_condition_detected), true)))
    %assert(%var(slashing_condition_detected))
    %assign(%var(validator_deposit), %icall(get_deposit_size, %var(validator_index_1)))
    %assign(%var(slashing_bounty), %binop(/, %var(validator_deposit), 25))
    %augassign(+=, %svar(total_destroyed), %binop(/, %binop(*, %var(validator_deposit), 24), 25))
    %stmtexpr(%icall(delete_validator, %var(validator_index_1)))
    %send(%msg.sender, %var(slashing_bounty)))
  %fdecl(%@public, owner_withdraw, , %void,
    %send(%svar(owner), %svar(total_destroyed))
    %assign(%svar(total_destroyed), 0))
  %fdecl(%@public, change_owner, %param(new_owner, %address), %void,
    %if(%compareop(%eq, %svar(owner), %msg.sender),
      %assign(%svar(owner), %var(new_owner))))
)
